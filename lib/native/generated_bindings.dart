// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: unused_element

import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>('__va_start');
  late final ___va_start = ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('__security_init_cookie');
  late final ___security_init_cookie = ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('__security_check_cookie');
  late final ___security_check_cookie = ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr = _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>('__report_gsfailure');
  late final ___report_gsfailure = ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie = _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  ffi.Pointer<ffi.Int8> plc_tag_decode_error(
    int err,
  ) {
    return _plc_tag_decode_error(
      err,
    );
  }

  late final _plc_tag_decode_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int8> Function(ffi.Int32)>>('plc_tag_decode_error');
  late final _plc_tag_decode_error = _plc_tag_decode_errorPtr.asFunction<ffi.Pointer<ffi.Int8> Function(int)>();

  void plc_tag_set_debug_level(
    int debug_level,
  ) {
    return _plc_tag_set_debug_level(
      debug_level,
    );
  }

  late final _plc_tag_set_debug_levelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>('plc_tag_set_debug_level');
  late final _plc_tag_set_debug_level = _plc_tag_set_debug_levelPtr.asFunction<void Function(int)>();

  int plc_tag_check_lib_version(
    int req_major,
    int req_minor,
    int req_patch,
  ) {
    return _plc_tag_check_lib_version(
      req_major,
      req_minor,
      req_patch,
    );
  }

  late final _plc_tag_check_lib_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>('plc_tag_check_lib_version');
  late final _plc_tag_check_lib_version = _plc_tag_check_lib_versionPtr.asFunction<int Function(int, int, int)>();

  int plc_tag_create(
    ffi.Pointer<ffi.Int8> attrib_str,
    int timeout,
  ) {
    return _plc_tag_create(
      attrib_str,
      timeout,
    );
  }

  late final _plc_tag_createPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Int8>, ffi.Int32)>>('plc_tag_create');
  late final _plc_tag_create = _plc_tag_createPtr.asFunction<int Function(ffi.Pointer<ffi.Int8>, int)>();

  void plc_tag_shutdown() {
    return _plc_tag_shutdown();
  }

  late final _plc_tag_shutdownPtr = _lookup<ffi.NativeFunction<ffi.Void Function()>>('plc_tag_shutdown');
  late final _plc_tag_shutdown = _plc_tag_shutdownPtr.asFunction<void Function()>();

  int plc_tag_register_callback(
    int tag_id,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Int32)>> tag_callback_func,
  ) {
    return _plc_tag_register_callback(
      tag_id,
      tag_callback_func,
    );
  }

  late final _plc_tag_register_callbackPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Int32, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Int32)>>)>>(
      'plc_tag_register_callback');
  late final _plc_tag_register_callback = _plc_tag_register_callbackPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Int32)>>)>();

  int plc_tag_unregister_callback(
    int tag_id,
  ) {
    return _plc_tag_unregister_callback(
      tag_id,
    );
  }

  late final _plc_tag_unregister_callbackPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('plc_tag_unregister_callback');
  late final _plc_tag_unregister_callback = _plc_tag_unregister_callbackPtr.asFunction<int Function(int)>();

  int plc_tag_register_logger(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>> log_callback_func,
  ) {
    return _plc_tag_register_logger(
      log_callback_func,
    );
  }

  late final _plc_tag_register_loggerPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>)>>(
      'plc_tag_register_logger');
  late final _plc_tag_register_logger = _plc_tag_register_loggerPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>)>();

  int plc_tag_unregister_logger() {
    return _plc_tag_unregister_logger();
  }

  late final _plc_tag_unregister_loggerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('plc_tag_unregister_logger');
  late final _plc_tag_unregister_logger = _plc_tag_unregister_loggerPtr.asFunction<int Function()>();

  int plc_tag_lock(
    int tag,
  ) {
    return _plc_tag_lock(
      tag,
    );
  }

  late final _plc_tag_lockPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('plc_tag_lock');
  late final _plc_tag_lock = _plc_tag_lockPtr.asFunction<int Function(int)>();

  int plc_tag_unlock(
    int tag,
  ) {
    return _plc_tag_unlock(
      tag,
    );
  }

  late final _plc_tag_unlockPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('plc_tag_unlock');
  late final _plc_tag_unlock = _plc_tag_unlockPtr.asFunction<int Function(int)>();

  int plc_tag_abort(
    int tag,
  ) {
    return _plc_tag_abort(
      tag,
    );
  }

  late final _plc_tag_abortPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('plc_tag_abort');
  late final _plc_tag_abort = _plc_tag_abortPtr.asFunction<int Function(int)>();

  int plc_tag_destroy(
    int tag,
  ) {
    return _plc_tag_destroy(
      tag,
    );
  }

  late final _plc_tag_destroyPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('plc_tag_destroy');
  late final _plc_tag_destroy = _plc_tag_destroyPtr.asFunction<int Function(int)>();

  int plc_tag_read(
    int tag,
    int timeout,
  ) {
    return _plc_tag_read(
      tag,
      timeout,
    );
  }

  late final _plc_tag_readPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_read');
  late final _plc_tag_read = _plc_tag_readPtr.asFunction<int Function(int, int)>();

  int plc_tag_status(
    int tag,
  ) {
    return _plc_tag_status(
      tag,
    );
  }

  late final _plc_tag_statusPtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('plc_tag_status');
  late final _plc_tag_status = _plc_tag_statusPtr.asFunction<int Function(int)>();

  int plc_tag_write(
    int tag,
    int timeout,
  ) {
    return _plc_tag_write(
      tag,
      timeout,
    );
  }

  late final _plc_tag_writePtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_write');
  late final _plc_tag_write = _plc_tag_writePtr.asFunction<int Function(int, int)>();

  int plc_tag_get_int_attribute(
    int tag,
    ffi.Pointer<ffi.Int8> attrib_name,
    int default_value,
  ) {
    return _plc_tag_get_int_attribute(
      tag,
      attrib_name,
      default_value,
    );
  }

  late final _plc_tag_get_int_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>(
          'plc_tag_get_int_attribute');
  late final _plc_tag_get_int_attribute =
      _plc_tag_get_int_attributePtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int plc_tag_set_int_attribute(
    int tag,
    ffi.Pointer<ffi.Int8> attrib_name,
    int new_value,
  ) {
    return _plc_tag_set_int_attribute(
      tag,
      attrib_name,
      new_value,
    );
  }

  late final _plc_tag_set_int_attributePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>(
          'plc_tag_set_int_attribute');
  late final _plc_tag_set_int_attribute =
      _plc_tag_set_int_attributePtr.asFunction<int Function(int, ffi.Pointer<ffi.Int8>, int)>();

  int plc_tag_get_size(
    int tag,
  ) {
    return _plc_tag_get_size(
      tag,
    );
  }

  late final _plc_tag_get_sizePtr = _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>('plc_tag_get_size');
  late final _plc_tag_get_size = _plc_tag_get_sizePtr.asFunction<int Function(int)>();

  int plc_tag_set_size(
    int tag,
    int new_size,
  ) {
    return _plc_tag_set_size(
      tag,
      new_size,
    );
  }

  late final _plc_tag_set_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_set_size');
  late final _plc_tag_set_size = _plc_tag_set_sizePtr.asFunction<int Function(int, int)>();

  int plc_tag_get_bit(
    int tag,
    int offset_bit,
  ) {
    return _plc_tag_get_bit(
      tag,
      offset_bit,
    );
  }

  late final _plc_tag_get_bitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_bit');
  late final _plc_tag_get_bit = _plc_tag_get_bitPtr.asFunction<int Function(int, int)>();

  int plc_tag_set_bit(
    int tag,
    int offset_bit,
    int val,
  ) {
    return _plc_tag_set_bit(
      tag,
      offset_bit,
      val,
    );
  }

  late final _plc_tag_set_bitPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>('plc_tag_set_bit');
  late final _plc_tag_set_bit = _plc_tag_set_bitPtr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_uint64(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_uint64(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_uint64Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint64 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_uint64');
  late final _plc_tag_get_uint64 = _plc_tag_get_uint64Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_uint64(
    int tag,
    int offset,
    int val,
  ) {
    return _plc_tag_set_uint64(
      tag,
      offset,
      val,
    );
  }

  late final _plc_tag_set_uint64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Uint64)>>('plc_tag_set_uint64');
  late final _plc_tag_set_uint64 = _plc_tag_set_uint64Ptr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_int64(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_int64(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_int64');
  late final _plc_tag_get_int64 = _plc_tag_get_int64Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_int64(
    int arg0,
    int offset,
    int val,
  ) {
    return _plc_tag_set_int64(
      arg0,
      offset,
      val,
    );
  }

  late final _plc_tag_set_int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int64)>>('plc_tag_set_int64');
  late final _plc_tag_set_int64 = _plc_tag_set_int64Ptr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_uint32(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_uint32(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_uint32Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_uint32');
  late final _plc_tag_get_uint32 = _plc_tag_get_uint32Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_uint32(
    int tag,
    int offset,
    int val,
  ) {
    return _plc_tag_set_uint32(
      tag,
      offset,
      val,
    );
  }

  late final _plc_tag_set_uint32Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Uint32)>>('plc_tag_set_uint32');
  late final _plc_tag_set_uint32 = _plc_tag_set_uint32Ptr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_int32(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_int32(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_int32Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_int32');
  late final _plc_tag_get_int32 = _plc_tag_get_int32Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_int32(
    int arg0,
    int offset,
    int val,
  ) {
    return _plc_tag_set_int32(
      arg0,
      offset,
      val,
    );
  }

  late final _plc_tag_set_int32Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int32)>>('plc_tag_set_int32');
  late final _plc_tag_set_int32 = _plc_tag_set_int32Ptr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_uint16(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_uint16(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_uint16Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint16 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_uint16');
  late final _plc_tag_get_uint16 = _plc_tag_get_uint16Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_uint16(
    int tag,
    int offset,
    int val,
  ) {
    return _plc_tag_set_uint16(
      tag,
      offset,
      val,
    );
  }

  late final _plc_tag_set_uint16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Uint16)>>('plc_tag_set_uint16');
  late final _plc_tag_set_uint16 = _plc_tag_set_uint16Ptr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_int16(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_int16(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_int16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int16 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_int16');
  late final _plc_tag_get_int16 = _plc_tag_get_int16Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_int16(
    int arg0,
    int offset,
    int val,
  ) {
    return _plc_tag_set_int16(
      arg0,
      offset,
      val,
    );
  }

  late final _plc_tag_set_int16Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int16)>>('plc_tag_set_int16');
  late final _plc_tag_set_int16 = _plc_tag_set_int16Ptr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_uint8(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_uint8(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_uint8Ptr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_uint8');
  late final _plc_tag_get_uint8 = _plc_tag_get_uint8Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_uint8(
    int tag,
    int offset,
    int val,
  ) {
    return _plc_tag_set_uint8(
      tag,
      offset,
      val,
    );
  }

  late final _plc_tag_set_uint8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Uint8)>>('plc_tag_set_uint8');
  late final _plc_tag_set_uint8 = _plc_tag_set_uint8Ptr.asFunction<int Function(int, int, int)>();

  int plc_tag_get_int8(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_int8(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int8 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_int8');
  late final _plc_tag_get_int8 = _plc_tag_get_int8Ptr.asFunction<int Function(int, int)>();

  int plc_tag_set_int8(
    int arg0,
    int offset,
    int val,
  ) {
    return _plc_tag_set_int8(
      arg0,
      offset,
      val,
    );
  }

  late final _plc_tag_set_int8Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Int8)>>('plc_tag_set_int8');
  late final _plc_tag_set_int8 = _plc_tag_set_int8Ptr.asFunction<int Function(int, int, int)>();

  double plc_tag_get_float64(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_float64(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_float64Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_float64');
  late final _plc_tag_get_float64 = _plc_tag_get_float64Ptr.asFunction<double Function(int, int)>();

  int plc_tag_set_float64(
    int tag,
    int offset,
    double val,
  ) {
    return _plc_tag_set_float64(
      tag,
      offset,
      val,
    );
  }

  late final _plc_tag_set_float64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Double)>>('plc_tag_set_float64');
  late final _plc_tag_set_float64 = _plc_tag_set_float64Ptr.asFunction<int Function(int, int, double)>();

  double plc_tag_get_float32(
    int tag,
    int offset,
  ) {
    return _plc_tag_get_float32(
      tag,
      offset,
    );
  }

  late final _plc_tag_get_float32Ptr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_float32');
  late final _plc_tag_get_float32 = _plc_tag_get_float32Ptr.asFunction<double Function(int, int)>();

  int plc_tag_set_float32(
    int tag,
    int offset,
    double val,
  ) {
    return _plc_tag_set_float32(
      tag,
      offset,
      val,
    );
  }

  late final _plc_tag_set_float32Ptr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Float)>>('plc_tag_set_float32');
  late final _plc_tag_set_float32 = _plc_tag_set_float32Ptr.asFunction<int Function(int, int, double)>();

  int plc_tag_set_raw_bytes(
    int id,
    int offset,
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_length,
  ) {
    return _plc_tag_set_raw_bytes(
      id,
      offset,
      buffer,
      buffer_length,
    );
  }

  late final _plc_tag_set_raw_bytesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32)>>(
          'plc_tag_set_raw_bytes');
  late final _plc_tag_set_raw_bytes =
      _plc_tag_set_raw_bytesPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Uint8>, int)>();

  int plc_tag_get_raw_bytes(
    int id,
    int offset,
    ffi.Pointer<ffi.Uint8> buffer,
    int buffer_length,
  ) {
    return _plc_tag_get_raw_bytes(
      id,
      offset,
      buffer,
      buffer_length,
    );
  }

  late final _plc_tag_get_raw_bytesPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Uint8>, ffi.Int32)>>(
          'plc_tag_get_raw_bytes');
  late final _plc_tag_get_raw_bytes =
      _plc_tag_get_raw_bytesPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Uint8>, int)>();

  int plc_tag_get_string(
    int tag_id,
    int string_start_offset,
    ffi.Pointer<ffi.Int8> buffer,
    int buffer_length,
  ) {
    return _plc_tag_get_string(
      tag_id,
      string_start_offset,
      buffer,
      buffer_length,
    );
  }

  late final _plc_tag_get_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>, ffi.Int32)>>(
          'plc_tag_get_string');
  late final _plc_tag_get_string =
      _plc_tag_get_stringPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Int8>, int)>();

  int plc_tag_set_string(
    int tag_id,
    int string_start_offset,
    ffi.Pointer<ffi.Int8> string_val,
  ) {
    return _plc_tag_set_string(
      tag_id,
      string_start_offset,
      string_val,
    );
  }

  late final _plc_tag_set_stringPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32, ffi.Pointer<ffi.Int8>)>>(
          'plc_tag_set_string');
  late final _plc_tag_set_string = _plc_tag_set_stringPtr.asFunction<int Function(int, int, ffi.Pointer<ffi.Int8>)>();

  int plc_tag_get_string_length(
    int tag_id,
    int string_start_offset,
  ) {
    return _plc_tag_get_string_length(
      tag_id,
      string_start_offset,
    );
  }

  late final _plc_tag_get_string_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_string_length');
  late final _plc_tag_get_string_length = _plc_tag_get_string_lengthPtr.asFunction<int Function(int, int)>();

  int plc_tag_get_string_capacity(
    int tag_id,
    int string_start_offset,
  ) {
    return _plc_tag_get_string_capacity(
      tag_id,
      string_start_offset,
    );
  }

  late final _plc_tag_get_string_capacityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_string_capacity');
  late final _plc_tag_get_string_capacity = _plc_tag_get_string_capacityPtr.asFunction<int Function(int, int)>();

  int plc_tag_get_string_total_length(
    int tag_id,
    int string_start_offset,
  ) {
    return _plc_tag_get_string_total_length(
      tag_id,
      string_start_offset,
    );
  }

  late final _plc_tag_get_string_total_lengthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, ffi.Int32)>>('plc_tag_get_string_total_length');
  late final _plc_tag_get_string_total_length =
      _plc_tag_get_string_total_lengthPtr.asFunction<int Function(int, int)>();
}

typedef va_list = ffi.Pointer<ffi.Int8>;
typedef uintptr_t = ffi.Uint64;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int PLCTAG_STATUS_PENDING = 1;

const int PLCTAG_STATUS_OK = 0;

const int PLCTAG_ERR_ABORT = -1;

const int PLCTAG_ERR_BAD_CONFIG = -2;

const int PLCTAG_ERR_BAD_CONNECTION = -3;

const int PLCTAG_ERR_BAD_DATA = -4;

const int PLCTAG_ERR_BAD_DEVICE = -5;

const int PLCTAG_ERR_BAD_GATEWAY = -6;

const int PLCTAG_ERR_BAD_PARAM = -7;

const int PLCTAG_ERR_BAD_REPLY = -8;

const int PLCTAG_ERR_BAD_STATUS = -9;

const int PLCTAG_ERR_CLOSE = -10;

const int PLCTAG_ERR_CREATE = -11;

const int PLCTAG_ERR_DUPLICATE = -12;

const int PLCTAG_ERR_ENCODE = -13;

const int PLCTAG_ERR_MUTEX_DESTROY = -14;

const int PLCTAG_ERR_MUTEX_INIT = -15;

const int PLCTAG_ERR_MUTEX_LOCK = -16;

const int PLCTAG_ERR_MUTEX_UNLOCK = -17;

const int PLCTAG_ERR_NOT_ALLOWED = -18;

const int PLCTAG_ERR_NOT_FOUND = -19;

const int PLCTAG_ERR_NOT_IMPLEMENTED = -20;

const int PLCTAG_ERR_NO_DATA = -21;

const int PLCTAG_ERR_NO_MATCH = -22;

const int PLCTAG_ERR_NO_MEM = -23;

const int PLCTAG_ERR_NO_RESOURCES = -24;

const int PLCTAG_ERR_NULL_PTR = -25;

const int PLCTAG_ERR_OPEN = -26;

const int PLCTAG_ERR_OUT_OF_BOUNDS = -27;

const int PLCTAG_ERR_READ = -28;

const int PLCTAG_ERR_REMOTE_ERR = -29;

const int PLCTAG_ERR_THREAD_CREATE = -30;

const int PLCTAG_ERR_THREAD_JOIN = -31;

const int PLCTAG_ERR_TIMEOUT = -32;

const int PLCTAG_ERR_TOO_LARGE = -33;

const int PLCTAG_ERR_TOO_SMALL = -34;

const int PLCTAG_ERR_UNSUPPORTED = -35;

const int PLCTAG_ERR_WINSOCK = -36;

const int PLCTAG_ERR_WRITE = -37;

const int PLCTAG_ERR_PARTIAL = -38;

const int PLCTAG_ERR_BUSY = -39;

const int PLCTAG_DEBUG_NONE = 0;

const int PLCTAG_DEBUG_ERROR = 1;

const int PLCTAG_DEBUG_WARN = 2;

const int PLCTAG_DEBUG_INFO = 3;

const int PLCTAG_DEBUG_DETAIL = 4;

const int PLCTAG_DEBUG_SPEW = 5;

const int PLCTAG_EVENT_READ_STARTED = 1;

const int PLCTAG_EVENT_READ_COMPLETED = 2;

const int PLCTAG_EVENT_WRITE_STARTED = 3;

const int PLCTAG_EVENT_WRITE_COMPLETED = 4;

const int PLCTAG_EVENT_ABORTED = 5;

const int PLCTAG_EVENT_DESTROYED = 6;

const int PLCTAG_EVENT_MAX = 7;
